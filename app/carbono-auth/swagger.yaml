swagger: "2.0"
info:
  description: |
    This API describes the Carbono Authentication Server operations that are unrelated with the OAuth2 flow.
  version: "1.0.0"
  title: Carbono Auth
basePath: /carbono-auth
schemes:
  - http
paths:
  /clients:
    post:
      description: Registers an application, allowing it to authenticate users with Carbono authentications.
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: name
          type: string
          in: formData
          required: true
          description: |
            Client name. It will be shown at the screen used for requesting user permissions.
        - name: id
          type: string
          in: formData
          required: true
          description: |
            Client Id. Unique identifier for a client.
        - name: secret
          type: string
          in: formData
          required: true
          description: |
            Client secret. Together with Client Id, it's used for authenticate the client during the oauth flow.
        - name: code
          type: string
          in: formData
          required: true
          description: |
            Valid user id, obtained through Basic Access Authentication (http://tools.ietf.org/html/rfc2617#section-2) of an user previously registered at Imperial.
      responses:
        '200':
          description: Client registered
        '400':
          description: Malformed request
          schema:
            $ref: '#/definitions/errorMessage'
        '403':
          description: Unauthorized user
          schema:
            $ref: '#/definitions/errorMessage'
    get:
      description: |
        Retrieves all clients registered by an user.
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
          description: |
            Valid user id and password through Basic Access Authentication (http://tools.ietf.org/html/rfc2617#section-2) of an user previously registered at Imperial.
      responses:
        '200':
          description: |
            Descriptions of all clients registered by an user.
          schema:
            $ref: '#/definitions/responseClients'
        '400':
          description: Malformed request
          schema:
            $ref: '#/definitions/errorMessage'
        '403':
          description: Unauthorized user
          schema:
            $ref: '#/definitions/errorMessage'

  
  /oauth2/token/: # password-grant
    post:
      description: |
        Password grant flow for trusted Clients on browsers and mobiles apps.
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
          description: |
            Valid Client credentials. See Basic Access Authorization 'http://tools.ietf.org/html/rfc2617' and Password-Type Grant ' http://tools.ietf.org/html/draft-ietf-oauth-v2-28#section-4.3'.
        - name: grant_type
          type: string
          in: formData
          required: true
          description: Must be 'password'.
        - name: username
          type: string
          in: formData
          required: true
          description: |
            User Id on Imperial, usually an email.
        - name: password
          type: string
          in: formData
          required: true
          description: |
            User password on Imperial matching the username.
        - name: scope
          type: string
          in: formData
          required: false
          description: |
            Comma separated words, useful to set and authorization scope for the token.
      responses:
        '200':
          description: User authenticated and a Token object is returned.
          schema:
            $ref: '#/definitions/accessToken'
        '401':
          description: Invalid Client credentials.
        '403':
          description: Invalid Resource Owner ( User ) credentials.

  /oauth2/authorize:
    get:
      description: |
        First step of OAuth2 flow for external Clients.
      produces:
        - text/html
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
          description: |
            Valid user id and password through (Basic Access Authentication)[http://tools.ietf.org/html/rfc2617] of an user previously registered at Imperial.
        - name: client_id
          type: string
          in: query
          required: true
          description: Client Id
        - name: response_type
          type: string
          in: query
          required: true
          description: Must be 'code', to proceed with Authorization Code
        - name: redirect_uri
          type: string
          in: query
          required: true
          description: |
            Url which will continue OAuth2 flow, after received the Authorization Code.
      responses:
        '200':
          description: HTML file asking for user permissions.
    post:
      description: |
        Second step of OAuth2 flow for external Clients.
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: transaction_id
          type: string
          in: formData
          required: true
          description: |
            Transaction ID generated by the first step of OAuth2 flow.
      responses:
        '200':
          description: |
            Redirects to redirect_uri, with an Authorization Code inside query string.


  /oauth2/token: # code-grant
    post:
      description: |
        Last step of OAuth2 flow for external Clients.
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
          description: |
            Valid Client credentials. See Basic Access Authorization 'http://tools.ietf.org/html/rfc2617' and Password-Type Grant ' http://tools.ietf.org/html/draft-ietf-oauth-v2-28#section-4.3'.
        - name: code
          type: string
          in: formData
          required: true
          description: |
            Authorization code generated by the second step of OAuth2 flow.
        - name: grant_type
          type: string
          in: formData
          required: true
          description: Must be 'authorization_code'.
        - name: redirect_uri
          type: string
          in: formData
          required: true
          description: |
            Redirect url which must match the redirect_uri parameter used at the first step of OAuth2 flow.
      responses:
        '200':
          description: User authenticated and a Token object is returned.
          schema:
            $ref: '#/definitions/accessToken'
        '401':
          description: Invalid Client credentials.
        '403':
          description: Invalid Authorization Code.

  /bearer/validate:
    post:
      description: |
        Verify if the given token is valid. It returns a user profile related to the token.
      produces:
        - application/json
      parameters:
        - name: token
          in: body
          description: User's token
          required: true
          schema:
            $ref: '#/definitions/requestUserMessage'
      responses:
        '200':
          description: User retrieved
          schema:
            $ref: '#/definitions/responseUserMessage'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/errorMessage'
        '400':
          description: Malformed request
          schema:
            $ref: '#/definitions/errorMessage'

definitions:
  client:
    properties:
      name:
        type: string
      id:
        type: string
      secret:
        type: string

  responseClients:
    properties:
      id:
        type: string
        description: Id that unique identifies the  message
      apiVersion:
        type: string
        description: The version of the api
      data:
        required:
          - id
          - items
        properties:
          id:
            type: string
            description: Id that unique identifies the requested data
          items:
            type: array
            description: An array of data items
            items:
              properties:
                client:
                  type: object
                  $ref: '#/definitions/client'

  userInfo:
    properties:
      provider:
        description: Provider with which the user authenticated
        type: string
      id:
        description: |
          Unique identifier for the user, as generated by the service provider.
        type: string
      displayName:
        description: The name of this user, suitable for display.
        type: string
      name:
        type: object
        properties:
          familyName:
            description: |
              The family name of this user, or "last name" in most Western languages.
            type: string
          givenName:
            description: |
              The given name of this user, or "first name" in most Western languages.
            type: string
          middleName:
            description: The middle name of this user.
            type: string
      emails:
        type: array
        items:
          properties:
            value:
              description: The actual email address.
              type: string
            type:
              description: The type of email address (home, work, etc.).
              type: string
      photos:
        type: array
        items:
          properties:
            value:
              description: The URL of the image.
              type: string

  requestUserMessage:
    properties:
      id:
        type: string
        description: Id that unique identifies the  message
      apiVersion:
        type: string
        description: The version of the api
      data:
        required:
          - id
          - items
        properties:
          id:
            type: string
            description: Id that unique identifies the requested data
          items:
            type: array
            description: An array of data items
            items:
              properties:
                token:
                  type: string

  responseUserMessage:
    properties:
      id:
        type: string
        description: Id that unique identifies the  message
      apiVersion:
        type: string
        description: The version of the api
      data:
        required:
          - id
          - items
        properties:
          id:
            type: string
            description: Id that unique identifies the requested data
          items:
            type: array
            description: An array of data items
            items:
              properties:
                userInfo:
                  type: object
                  $ref: '#/definitions/userInfo'
  errorMessage:
    properties:
      id:
        type: string
        description: Id that unique identifies the error message
      apiVersion:
        type: string
        description: The version of the api
      error:
        required:
          - code
          - message
        properties:
          code:
            type: integer
            format: int64
            description: The error code (i.e. 400, 404)
          message:
            type: string
            description: The error message
  
  accessToken:
    properties:
      value:
        type: string
        description: The token hash.
      clientId:
        type: string
        description: The client uid.
      userId:
        type: string
        description: The user uid (code).